# General GQL Types
type Query {
  habit(id: ID!): Habit!
  habits: HabitConnection!
  me: AgentProfile!
}

type Mutation {
  createHabit(habit: HabitCreateParams): HabitCreateResponse!
  createUser(profile: UserProfileCreateParams): AgentProfile!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}
interface Node {
  id: ID!
}

# Holochain Specific Types
type ResponsePayload {
  headerHash: String!
  entryHash: String!
}

# ---- UserProfile ----- #
# UserProfile GQL Types

# UserProfile Types
type AgentProfile {
  agentPubKey: String!
  profile: Profile!
}

type Profile {
  nickname: String!
  fields: ProfileFields
}

type ProfileFields {
  location: String
  isPublic: String
  avatar: String
}

# UserProfile Input/Output
input UserProfileCreateParams {
  nickname: String!
  location: String
  isPublic: String
  avatar: String
}

# ---- Habit ----- #
# Habit GQL Types
type HabitConnection {
  edges: [HabitEdge!]!
  pageInfo: PageInfo!
}

type HabitEdge {
  cursor: String!
  node: Habit!
}

# Habit Types
type Habit implements Node {
  id: ID!
  name: String!
  timeframe: TimeFrame!
  metadata: HabitMetaData
}

scalar DateTime

type TimeFrame {
  startTime: DateTime!
  endTime: DateTime!
}

type HabitMetaData {
  description: String!
  isAtomic: String!
  # atomicListEntryHash: String
}

# Habit Input/Outputs
input HabitCreateParams {
  name: String!
  startTime: DateTime!
  endTime: DateTime!
  description: String!
  isAtomic: String!
  # atomicListEntryHash: String
}

type HabitCreateResponse {
  payload: ResponsePayload!
}

#

type Todo {
  id: ID!
  description: String!
  status: Boolean!
}
