type Query {
  habit(id: ID!): Habit!
  # habits: HabitConnection!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Todo {
  id: ID!
  description: String!
  status: Boolean!
}

type HabitConnection {
  edges: [HabitEdge!]!
  pageInfo: PageInfo!
}

type HabitEdge {
  cursor: String!
  node: Habit!
}

scalar DateTime 

interface TimeFrame {
  startTime: DateTime!
  endTime: DateTime!
}

type Habit {
  id: ID!
  name: String!
  timeframe: TimeFrame!
  metadata: HabitMetaData
}

type HabitMetaData {
  description: String!
  isAtomic: String!
  # atomicListEntryHash: String
}

"Mutations"
type Mutation {
  createHabit(habit: HabitCreateParams): HabitCreateResponse!
}

type ResponsePayload {
  header: String!
  entry: String!
}

input HabitCreateParams {
  name: String!
  startTime: DateTime!
  endTime: DateTime!
  description: String!
  isAtomic: String!
  # atomicListEntryHash: String
}

type HabitCreateResponse {
  payload: ResponsePayload!
}


